<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/shablona/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/shablona/" rel="alternate" type="text/html" /><updated>2018-08-27T14:25:31-04:00</updated><id>http://localhost:4000/shablona/</id><title type="html">Open Source and Reproducible MIR Research</title><subtitle>The goal of this tutorial is to provide hands-on,  practical training for MIR researchers to learn modern tools  for improving the quality of their research software.</subtitle><entry><title type="html">Part 1: Installing Tools</title><link href="http://localhost:4000/shablona/tutorial/2018/08/16/part-1.html" rel="alternate" type="text/html" title="Part 1:  Installing Tools" /><published>2018-08-16T15:16:46-04:00</published><updated>2018-08-16T15:16:46-04:00</updated><id>http://localhost:4000/shablona/tutorial/2018/08/16/part-1</id><content type="html" xml:base="http://localhost:4000/shablona/tutorial/2018/08/16/part-1.html">&lt;p&gt;Welcome!  This part of the tutorial will cover installing the tools that you’ll need to have on your laptop:  the Python programming language, the Conda package manager, and the git version control system.&lt;/p&gt;

&lt;h2 id=&quot;install-python&quot;&gt;Install Python&lt;/h2&gt;
&lt;p&gt;Visit the main &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python page&lt;/a&gt;, and download Python 3.6 or higher.&lt;/p&gt;

&lt;p&gt;Mac users, you very probably have Python 2.7 on your computer – please do go and get Python 3.6.&lt;/p&gt;

&lt;p&gt;Linux users, you have some version of Python on your machine – please make sure that you have Python 3.6, and go and get it if not.&lt;/p&gt;

&lt;p&gt;Windows users, we &lt;em&gt;highly&lt;/em&gt; recommend that you install the [Windows System for Linux][wsl-install] and Ubuntu.  You can then do the rest of this tutorial as a Linux user!
While you’re welcome to use Powershell, we can’t guarantee that we’ll be able to help you!&lt;/p&gt;

&lt;h4 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Python 3.6.5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(You’ll see these checkpoints throughout the tutorial.  If you’re doing the tutorial with us in person, we’ll stop at these points to make sure that everyone is in the same place.  If your checkpoint is working, you can put a blue sticky note on your laptop.  If something’s not working, that’s totally OK!  Put a red sticky note on your machine, and we’ll come help.)&lt;/p&gt;

&lt;h2 id=&quot;install-conda&quot;&gt;Install Conda&lt;/h2&gt;

&lt;p&gt;Conda is a package manager for Python code and lower-level code that supports Python.
Anaconda is a version of Conda that comes with lots and lots of pre-installed packages for scientific computing.
We’re going to use Anaconda so we don’t have to go digging for obscure Fortran and C libraries.&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href=&quot;https://docs.anaconda.com/anaconda/install/&quot;&gt;Anaconda website&lt;/a&gt;, and follow the steps for your platform.&lt;/p&gt;

&lt;p&gt;Windows users, please use your Linux install, and install the Linux version!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gotchas:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; or another non-bash shell, you’ll need to add things to your PATH yourself.  We recommend moving the lines that the installer added from your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; file to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;If you’re using a &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;, you’ll need to turn it off before installing Anaconda!  Conda in general does not play well with virtualenvs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;checkpoint-1&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda 4.5.10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;install-git&quot;&gt;Install git&lt;/h2&gt;

&lt;p&gt;git is a version control system – it keeps track of changes that you make to your code.
This makes it hard for you to lose changes that you have made, and makes it easy for you to return to a working version of your code.
git in particular also makes it easy to collaborate with other folks.&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git website&lt;/a&gt;, and follow the steps for your platform.&lt;/p&gt;

&lt;p&gt;Linux users, you may already have git installed - please make sure that you’re on version 2.15 or or higher.&lt;/p&gt;

&lt;p&gt;Windows users, please use your Linux install, and install the Linux version!  (We’ll stop reminding you about this soon, we promise.)&lt;/p&gt;

&lt;p&gt;We recommend against using a graphical interface for git – mostly because we won’t be able to help you with it in this tutorial!&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-2&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git version 2.7.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt;

&lt;p&gt;We’ve installed everything we’ll need on our machines.  In &lt;a href=&quot;https://bmcfee.github.io/shablona/tutorial/2018/08/15/part-2.html&quot;&gt;Part 2&lt;/a&gt;, we’ll set up the various web apps and accounts that we’ll need.&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome! This part of the tutorial will cover installing the tools that you’ll need to have on your laptop: the Python programming language, the Conda package manager, and the git version control system.</summary></entry><entry><title type="html">Part 2: Setting Up Services</title><link href="http://localhost:4000/shablona/tutorial/2018/08/15/part-2.html" rel="alternate" type="text/html" title="Part 2:  Setting Up Services" /><published>2018-08-15T15:16:46-04:00</published><updated>2018-08-15T15:16:46-04:00</updated><id>http://localhost:4000/shablona/tutorial/2018/08/15/part-2</id><content type="html" xml:base="http://localhost:4000/shablona/tutorial/2018/08/15/part-2.html">&lt;p&gt;Welcome to Part 2!  In this section we’ll set up accounts for the web services that we need – GitHub, Travis CI, and ReadTheDocs.&lt;/p&gt;

&lt;h2 id=&quot;set-up-github&quot;&gt;Set Up GitHub&lt;/h2&gt;
&lt;p&gt;GitHub hosts your code, makes it easy for other folks to collaborate with you, and makes it easier for other web services to hook into your code&lt;/p&gt;

&lt;p&gt;Vist &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;, and create an account.  Once you’ve got an account, you need to create some SSH keys.&lt;/p&gt;

&lt;p&gt;SSH keys are big numbers that GitHub uses for authorization.  Setting them up can be a bit fincky, but we’ll get through it!&lt;/p&gt;

&lt;p&gt;First, create a new SSH key by &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;following these steps&lt;/a&gt; – make sure to pick the correct platform.&lt;/p&gt;

&lt;p&gt;Now, we’ll add the key to our GitHub account.  &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account&quot;&gt;The steps to do so are here&lt;/a&gt; – again, make sure you pick the correct platform!&lt;/p&gt;

&lt;p&gt;Finally, let’s verify that your key works!  &lt;a href=&quot;https://help.github.com/articles/testing-your-ssh-connection&quot;&gt;The steps are here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Hi &amp;lt;your-username&amp;gt;! You&lt;span class=&quot;s1&quot;&gt;'ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;set-up-travis-ci&quot;&gt;Set Up Travis CI&lt;/h2&gt;
&lt;p&gt;Travis CI is a tool for “Continuous Integration”, which is just a fancy word for running the code that tests your software whenever you change your software.
We won’t get to using Travis for a little bit, but let’s get the setup out of the way now.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis&lt;/a&gt;, and make an account by pressing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign In With GitHub&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;You’ll be asked to authorize Travis to use your Github account.  Do so, and you’ll get redirected to your profile screen.  On your profile screen, press the “Activate” button to finish connecting Travis to you GitHub code.&lt;/p&gt;

&lt;p&gt;You’ll be taken to a GitHub page - just press “Approve &amp;amp; Install”!&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-1&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;No command line here - you should be able to visit &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis&lt;/a&gt;, and see your name in the upper-right to indicate that you’re logged in.&lt;/p&gt;

&lt;h2 id=&quot;set-up-readthedocs&quot;&gt;Set Up ReadTheDocs&lt;/h2&gt;
&lt;p&gt;ReadTheDocs hosts your documentation, so that people know how to use your software!  We’ll get to ReadTheDocs nearer to the end of the tutorial, but let’s get things set up now.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&quot;https://readthedocs.org&quot;&gt;ReadTheDocs&lt;/a&gt;, and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign up&lt;/code&gt;, and the select &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign Up With GitHub&lt;/code&gt;.  Like with Travis, you’ll be asked to authorize ReadTheDocs to use your GitHub account – do the same as you did before.
ReadTheDocs will also ask you to confirm your email, so open up your email client and do so.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-2&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;No command line here either - you should be able to visit &lt;a href=&quot;https://readthedocs.org&quot;&gt;ReadTheDocs&lt;/a&gt; and see your GitHub username in the upper-right to indicate that you’re logged in.&lt;/p&gt;

&lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt;

&lt;p&gt;We’ve set up the various web services we’ll need!  Next is &lt;a href=&quot;https://bmcfee.github.io/shablona/tutorial/2018/08/14/part-3.html&quot;&gt;Part 3&lt;/a&gt;, where we’ll get to the code!&lt;/p&gt;

&lt;h3 id=&quot;a-note-about-the-internet&quot;&gt;A Note About The Internet&lt;/h3&gt;

&lt;p&gt;All of the services we’ve go over are on the internet.  There are local tools that can do the same sorts of things that out of the scope of this tutorial.
If you need to keep you code secret, they might be right for you.  In general, we recommend using web services like the above because they’re much less hassle to set up.&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to Part 2! In this section we’ll set up accounts for the web services that we need – GitHub, Travis CI, and ReadTheDocs.</summary></entry><entry><title type="html">Part 3: Getting the Code</title><link href="http://localhost:4000/shablona/tutorial/2018/08/14/part-3.html" rel="alternate" type="text/html" title="Part 3:  Getting the Code" /><published>2018-08-14T15:16:46-04:00</published><updated>2018-08-14T15:16:46-04:00</updated><id>http://localhost:4000/shablona/tutorial/2018/08/14/part-3</id><content type="html" xml:base="http://localhost:4000/shablona/tutorial/2018/08/14/part-3.html">&lt;p&gt;Hello &amp;amp; welcome to Part 3!  This is where we’ll start to use the various things you’ve installed to work with the code.&lt;/p&gt;

&lt;h2 id=&quot;get-the-code&quot;&gt;Get the Code&lt;/h2&gt;

&lt;p&gt;We’re going to go over some real-world basics of how git works and how conda works.
We’ll do this by getting you a copy of the code we’re going to work with on to your local machine, then installing the packages we need with conda.&lt;/p&gt;

&lt;p&gt;Visit &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/bmcfee/shablona&lt;/code&gt;, and press the &lt;strong&gt;Fork&lt;/strong&gt; button.  You’ll be asked where to fork the code to – select your own GitHub username.  A “fork” is your own copy of our code.  You can change it without altering our code.&lt;/p&gt;

&lt;p&gt;Now, visit &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/&amp;lt;your-username&amp;gt;/shablona&lt;/code&gt;, and press the &lt;strong&gt;Clone&lt;/strong&gt; button.  Make sure to select &lt;strong&gt;Clone with SSH&lt;/strong&gt;, and then copy the string that looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;git@github:&amp;lt;your-username&amp;gt;/shablona.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, in your terminal, go to wherever you keep your code, and do &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone &amp;lt;that string&amp;gt;&lt;/code&gt;.  This will do a lot of stuff!  Once it is done, you should see a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;shablona&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into that directory, then do &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;.  You should see the same files that you see on GitHub!&lt;/p&gt;

&lt;h4 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;From the &lt;code class=&quot;highlighter-rouge&quot;&gt;shablona&lt;/code&gt; directory, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;On branch master
Your branch is up-to-date with &lt;span class=&quot;s1&quot;&gt;'origin/master'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
nothing to commit, working directory clean&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;install-things-with-conda&quot;&gt;Install Things with Conda&lt;/h2&gt;

&lt;p&gt;Conda, like we said earlier, is both a package manager and an environment manager.  A package manager just installs things for you.  An environment manager is a bit more complex – it keeps track of different indepenent environments, each of which can have different things installed.  So, for example, you can have one environment for this project and install the things that you need … and then have a different environment for a different project, with different packages installed!&lt;/p&gt;

&lt;p&gt;This may sound like overkill, but it is very helpful in the long run.  You’ll often find that different projects have clashing requirements, and maintaining one environment per project will prevent this from getting out of hand.&lt;/p&gt;

&lt;p&gt;So, let’s make one and install the code that we need!  To create an environment for this tutorial, do  &lt;code class=&quot;highlighter-rouge&quot;&gt;conda create --name ismir-2018&lt;/code&gt;.  You’ll see that environment has been created at &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/&amp;lt;your-user&amp;gt;/miniconda3/envs/ismir-2018-tutorial&lt;/code&gt;!  Hooray!  To turn it on do &lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate ismir-2018-tutorial&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that any Python code you install with conda or pip will only be installed in this environment.  If you want to get out of this environment, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;source deactivate&lt;/code&gt; – but don’t run it now!&lt;/p&gt;

&lt;p&gt;For now, we’re going to install all the stuff we need.  Run &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install --file requirements.txt&lt;/code&gt;.  Lots of things should happen!&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-1&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda list&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see something like the below – make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;librosa&lt;/code&gt; is in list!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;packages &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;environment at /Users/thorkell/miniconda3:

 Name                    Version                   Build
conda                     4.5.10                   py36_0
conda-env                 2.6.0                h36134e3_0
cryptography              2.2.2            py36h1de35cc_0
cycler                    0.10.0           py36hfc81398_0
docutils                  0.14             py36hbfde631_0
flake8                    3.5.0                    py36_1
freetype                  2.9.1                hb4e5f40_0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;run-the-tests&quot;&gt;Run the Tests&lt;/h2&gt;

&lt;p&gt;So we’ve installed all the packages we’ll need.  Let’s run the tests.  Tests make sure that your code is doing what your think it is doing – making sure that 2 + 2 in fact comes out to 4.&lt;/p&gt;

&lt;p&gt;You can find the test code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/&lt;/code&gt; folder, and we’ll talk more about testing later in the tutorial.  For now, just run the tests with &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;💥🔥💥🔥💥🔥💥🔥💥🔥💥 &lt;em&gt;OH NO EVERYTHING FAILED!&lt;/em&gt; 💥🔥💥🔥💥🔥💥🔥💥🔥💥&lt;/p&gt;

&lt;p&gt;Phew, ok, this is not actually a big deal at all.  Failing tests are usually a good sign, becaue they mean that your tests found a bug or a problem.  Let’s look at the error message that pytest is showing, and see if we can fix it.&lt;/p&gt;

&lt;p&gt;Ah, this does not look so bad.  We’re missing a package called &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt;.  We could just install it with conda, but we want to fix this problem for the long term.  So, open up that requirements.txt file, and add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; at the bottom, and the save it.  Then re-run &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install --file requirements.txt&lt;/code&gt;, and then run the tests again.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-2&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pytest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;platform darwin &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; Python 3.6.5, pytest-3.7.2, py-1.5.4, pluggy-0.7.1
rootdir: /Users/thorkell/Code/bmcfee/shablona, inifile:
collected 5 items

tests/test_shablona.py .....          	                        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;save-our-work&quot;&gt;Save Our Work&lt;/h2&gt;

&lt;p&gt;We fixed a bug, hooray!  But we’ve only fixed our local version.  Let’s commit this to our local git repository, and then update the version on GitHub.&lt;/p&gt;

&lt;p&gt;First, make a new branch to work on. Working in a branch means that we can do whatever we want without breaking our main code.  Do &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch update-conda-env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, add and commit your files:  &lt;code class=&quot;highlighter-rouge&quot;&gt;git add requirements.txt&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Add pandas to requirements.txt&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rad!  We’ve saved our work locally.  To push your code to GitHub, do &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin update-conda-env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We want to get in the habit of keeping our online work up to date with our local work.  So let’s go look at GitHub, and merge this branch there.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Visit GitHub, and find your fork of this repository:  https://github.com/&lt;your-github-username&gt;/shablona/branches&lt;/your-github-username&gt;&lt;/li&gt;
  &lt;li&gt;You’ll see a list of branches - select &lt;strong&gt;update-conda-env&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You’ll see a small button that says &lt;strong&gt;New pull request&lt;/strong&gt;.  Press it!&lt;/li&gt;
  &lt;li&gt;This will take you to a nice web form.  Put in the reasons for your changes, and press &lt;strong&gt;Create Pull Request&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hooray, you’ve made a Pull Request!  Pull Requests (PRs) are the best way to contribute code to a project.  You can review &amp;amp; comment on the proposed changes before merging them, or request that things be improved.&lt;/p&gt;

&lt;p&gt;🙏 Here’s an important aside:  when discussing code in PRs, please be nice!  It’s really easy for a neutral comment to be read as mean, and it’s really easy to alienate people by being mean  You should do your best to very polite and kind when dealing with people on GitHub (and probably on computers in general).&lt;/p&gt;

&lt;p&gt;With that said, let’s merge our PR!  This will add the changes from your branch to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Press &lt;strong&gt;Merge&lt;/strong&gt;.  GitHub will merge your commit into master.&lt;/li&gt;
  &lt;li&gt;Now your online repo is up to date, so let’s update your local.&lt;/li&gt;
  &lt;li&gt;In your command line, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next, do &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin master&lt;/code&gt; to update your local copy.  You’ll see that git adds your commit from GitHub to your local copy.&lt;/li&gt;
  &lt;li&gt;Finally, do &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d update-conda-env&lt;/code&gt; to delete your local branch – you’ve merged the commits to master, so you can delete it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;checkpoint-3&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;commit fc48577568d259f361a2e5f28267500ff2d4405f
Author: &amp;lt;Your Name&amp;gt; &amp;lt;your-email@your-server&amp;gt;
Date:   &amp;lt;today&amp;gt;

    Add pandas to requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve just gone over the basic git and GitHub workflow that you should, in general, stick with: make a branch, make some changes, run tests, commit, push, merge, clean up.&lt;/p&gt;

&lt;p&gt;This means that you never have untested code in master, and it means that master is always functional.  This is called “Continuous Integration”, or “Continuous Delivery”.  There are whole books about why this is a good idea, but you can read &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;a good summary of the GitHub version of it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It also means that the online, “deployed” version of master is your primary version, and you just have a local version that you’re working on.&lt;/p&gt;

&lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt;

&lt;p&gt;We’ve used git to check out code, modify it, and commit our modifications.  We’ve also used conda to install the code we need, in an environment that is specific to this project.  In [Part 4][tutorial-part-4], we’ll get into the details of our Python code and how it all fits together.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello &amp;amp; welcome to Part 3! This is where we’ll start to use the various things you’ve installed to work with the code.</summary></entry><entry><title type="html">Part 5: Tests</title><link href="http://localhost:4000/shablona/tutorial/2018/08/13/part-5.html" rel="alternate" type="text/html" title="Part 5:  Tests" /><published>2018-08-13T15:16:46-04:00</published><updated>2018-08-13T15:16:46-04:00</updated><id>http://localhost:4000/shablona/tutorial/2018/08/13/part-5</id><content type="html" xml:base="http://localhost:4000/shablona/tutorial/2018/08/13/part-5.html">&lt;p&gt;Hello &amp;amp; welcome to Part 5!  This is the section about testing, why testing is important, how to do it, and how to set up your repository to run your tests automatically when you push new code.&lt;/p&gt;

&lt;h2 id=&quot;why-shall-we-test-our-code&quot;&gt;Why Shall We Test Our Code?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/s93TL62lMy7cI/giphy.gif&quot; alt=&quot;why shall we test our code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tests make your life easier and give you confidence in your code.  Software is complicated, and tests allow you to be sure that you’ve not broken your project when you change something.&lt;/p&gt;

&lt;p&gt;Writing tests slows you down in the short term, but speeds things up in the long term.  Further, as someone who is writing scientific code, tests make sure that your work can be easily reproduced.&lt;/p&gt;

&lt;h2 id=&quot;fix-a-failing-test&quot;&gt;Fix A Failing Test&lt;/h2&gt;

&lt;p&gt;Let’s start by working through fixing a failing test, and commiting the results to our repository.&lt;/p&gt;

&lt;p&gt;Start by making a new branch, with &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b fix-failing-test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then open up &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;some-filename&amp;gt;&lt;/code&gt;, uncomment the function called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;test_some_function&amp;gt;&lt;/code&gt;, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test failed, oh no!&lt;/p&gt;

&lt;p&gt;So, that test is testing a function that we’ve stubbed out, but that returns obviously incorrect results.&lt;/p&gt;

&lt;p&gt;You can find the function in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; - go ahead and fix the function so that the tests pass.  Run &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt; as much as you want to, to make sure.&lt;/p&gt;

&lt;p&gt;Great!  You should also write a new test to verify that this function works correctly for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;some edge casee&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Philosophically, each test should test one thing.  This makes it easier to ensure that we can see what has broken when a test breaks.&lt;/p&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt; shows that both tests are passing, commit your changes, merge on github, and then pull the results back to your local.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pytest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;platform darwin &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; Python 3.6.5, pytest-3.7.2, py-1.5.4, pluggy-0.7.1
rootdir: /Users/thorkell/Code/bmcfee/shablona, inifile:
collected 5 items

tests/test_shablona.py .....          	                        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;get-travis-working&quot;&gt;Get Travis Working&lt;/h2&gt;

&lt;p&gt;We set up our Travis account in Part 2!  Travis is a service that runs your tests when you push new branches to GitHub.  This is useful because it means that you can’t forget to run your tests – and it means that other people’s PRs will have tests run against them.&lt;/p&gt;

&lt;p&gt;Travis is controlled by a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;.  This file tells the Travis servers what to do with your code - in our case, just run the tests.&lt;/p&gt;

&lt;p&gt;We’ve written the file for you.  Let’s take a quick look at it.  The big &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; block handles the gruntwork of installing conda, updating it, and setting up our environment.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; block is what Travis runs.  We currently just run &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s modify this to run &lt;code class=&quot;highlighter-rouge&quot;&gt;flake8&lt;/code&gt; as well.  &lt;code class=&quot;highlighter-rouge&quot;&gt;flake8&lt;/code&gt; checks your code style, to make sure that you’re writing code that is easy to read.&lt;/p&gt;

&lt;p&gt;All you need to do is add &lt;code class=&quot;highlighter-rouge&quot;&gt;flake8&lt;/code&gt; below the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;, then commit and push your code.&lt;/p&gt;

&lt;p&gt;Then, open up Travis, and you can see your tests run!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gotchas:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Rarely, your tests will pass locally but fail on Travis.  This is super frustrating, and is usually caused by there being a difference between your local environment and the Travis environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO ADD SOME WORDS HERE AND A BETTER TEST TODO&lt;/p&gt;

&lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt;

&lt;p&gt;We’ve added two tests, and gotten comfortable running pytest.  Furthermore, we’ve enabled Travis, so that our tests always run when we push code to GitHub.  In &lt;a href=&quot;https://bmcfee.github.io/shablona/tutorial/2018/08/12/part-6.html&quot;&gt;Part 6&lt;/a&gt;, we’ll set up our documentation so that it builds automatically, and write some new docs.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello &amp;amp; welcome to Part 5! This is the section about testing, why testing is important, how to do it, and how to set up your repository to run your tests automatically when you push new code.</summary></entry><entry><title type="html">Part 6: Documentation</title><link href="http://localhost:4000/shablona/tutorial/2018/08/12/part-6.html" rel="alternate" type="text/html" title="Part 6:  Documentation" /><published>2018-08-12T15:16:46-04:00</published><updated>2018-08-12T15:16:46-04:00</updated><id>http://localhost:4000/shablona/tutorial/2018/08/12/part-6</id><content type="html" xml:base="http://localhost:4000/shablona/tutorial/2018/08/12/part-6.html">&lt;p&gt;Hello &amp;amp; welcome to Part 6!  This section is about documentation, how to set up our documentation, and how to hows our documentation for free on the internet.&lt;/p&gt;

&lt;h2 id=&quot;build-some-docs&quot;&gt;Build Some Docs&lt;/h2&gt;

&lt;p&gt;Documentation is super important!  Good docs help people use and understand your software.  This includes both readme files that help people get started, and detailed docs for each method.&lt;/p&gt;

&lt;p&gt;We’re going to use a thing called Sphinx to generate our documentation from the comments we leave in our code.  Sphinx is really complicated and powerful, but we’ll be using it in a pretty simple way.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt; folder, and take a look around.  You’ll see a bunch of Sphnix boilerplate code.  The exact code here is not something you should worry about!  Instead, run &lt;code class=&quot;highlighter-rouge&quot;&gt;make html&lt;/code&gt; – this will generate all your documentation for you, in &lt;code class=&quot;highlighter-rouge&quot;&gt;_build/html&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;_build/html/index.html&lt;/code&gt; in a web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A working webpage!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-readthedocs-working&quot;&gt;Get ReadTheDocs Working&lt;/h2&gt;

&lt;p&gt;We set up our ReadTheDocs account in Part 2 – RTD is a service that builds and hosts your docs for you.&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-1&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;p&gt;– invoke Brian McFee –&lt;/p&gt;

&lt;h2 id=&quot;write-some-docs&quot;&gt;Write Some Docs&lt;/h2&gt;

&lt;p&gt;Rad, so we know how to make our docs, this is great.  But where do all those words come from?&lt;/p&gt;

&lt;p&gt;It turns out that Sphinx reads from comments that are formatted in a certain way.  This is cool because it means we can write good comments in our code, and have those comments automatically turn into our docs!&lt;/p&gt;

&lt;p&gt;Find &lt;function&gt; in &lt;file&gt; - you'll see that it does not have any documentation.  Take a look at &lt;other-function&gt; - you'll see that it has a detailed description of how it works, what parameters it takes, and what it returns.&lt;/other-function&gt;&lt;/file&gt;&lt;/function&gt;&lt;/p&gt;

&lt;p&gt;Based on this example, add a docstring to &lt;function&gt;.  Once you're happy with your docs, commit, push, and merge them to github - and Read The Docs will build your new docs for you!&lt;/function&gt;&lt;/p&gt;

&lt;h4 id=&quot;checkpoint-2&quot;&gt;Checkpoint&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Visit your site on ReadTheDocs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A working webpage, with your new docstring!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readme-and-license&quot;&gt;README and LICENSE&lt;/h2&gt;

&lt;p&gt;We’ve got formal documentation working, hooray!  You should also look at two other files.  README.md is your readme file – it’s the first thing that people see when they visit your project on GitHub.&lt;/p&gt;

&lt;p&gt;In general, your README should provided an overview of your project, how to install it, and maybe give one or two very simple examples.  The &lt;a href=&quot;https://github.com/librosa/librosa&quot;&gt;librosa&lt;/a&gt; README is a good example.&lt;/p&gt;

&lt;p&gt;Finally, there’s LICENSE.md.  It turns out that if f you publish code to GitHub without an explicit license, it is not open source.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;highly&lt;/em&gt; recommend open source, and we highly recommend choosing an open-source license and applying it to your code.  This is as simple as creating a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;LICENSE.md&lt;/code&gt; in your repository.  You can take a look at https://choosealicense.com to help you pick one - we recommend the MIT license, ourselves.&lt;/p&gt;

&lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt;

&lt;p&gt;We’ve added some documentation, and set up ReadTheDocs so that our docs will always be available on the Internet!  We also talked about READMEs and licensing.  This is the last bit of the tutorial proper – thanks for following along!&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello &amp;amp; welcome to Part 6! This section is about documentation, how to set up our documentation, and how to hows our documentation for free on the internet.</summary></entry></feed>